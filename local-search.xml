<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>翻转链表</title>
    <link href="/2022/03/28/%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/03/28/%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="一、反转链表"><a href="#一、反转链表" class="headerlink" title="一、反转链表"></a>一、<a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h4><h5 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode cur = head, next = cur.next, tmp;<br>        <span class="hljs-keyword">while</span> (next != <span class="hljs-keyword">null</span>) &#123;<br>            tmp = next.next;<br>            next.next = cur;<br>            cur = next;<br>            next = tmp;<br>        &#125;<br>        head.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="二、反转链表-II"><a href="#二、反转链表-II" class="headerlink" title="二、反转链表 II"></a>二、<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表 II</a></h4><h5 id="1-反转过程"><a href="#1-反转过程" class="headerlink" title="1.反转过程"></a>1.反转过程</h5><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II.png"></p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.next = head; <br>        ListNode pre = dummy;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; left; i ++) &#123;<br>            pre = pre.next;<br>        &#125;<br>        ListNode cur = pre.next, next;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = left; i &lt; right; i ++) &#123;<br>            next = cur.next;<br>            cur.next = next.next;<br>            next.next = pre.next;<br>            pre.next = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="三、K-个一组翻转链表"><a href="#三、K-个一组翻转链表" class="headerlink" title="三、K 个一组翻转链表"></a>三、<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表</a></h4><h5 id="1-翻转过程"><a href="#1-翻转过程" class="headerlink" title="1.翻转过程"></a>1.翻转过程</h5><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/K%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.png"></p><h5 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>); <br>        dummy.next = head; <br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            len ++;<br>            head = head.next;<br>        &#125;<br>        ListNode pre = dummy, cur = pre.next, next;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len / k; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; k - <span class="hljs-number">1</span>; j ++) &#123;<br>                next = cur.next;<br>                cur.next = next.next;<br>                next.next = pre.next;<br>                pre.next = next;<br>            &#125;<br>            pre = cur;<br>            cur = pre.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2022/03/26/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2022/03/26/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 打印元素左边第一个比它小的数</span><br>Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.getLast() &gt;= a[i]) &#123;<br>        stack.removeLast();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!stack.isEmpty()) &#123;<br>        System.out.print(stack.getLast() + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.print(-<span class="hljs-number">1</span> + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    stack.addLast(a[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>背包问题</title>
    <link href="/2022/03/26/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/26/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="一、01背包"><a href="#一、01背包" class="headerlink" title="一、01背包"></a>一、01背包</h3><h5 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1.整体思路"></a>1.整体思路</h5><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/01%E8%83%8C%E5%8C%85.png"></p><h5 id="2-代码模板"><a href="#2-代码模板" class="headerlink" title="2.代码模板"></a>2.代码模板</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N + <span class="hljs-number">1</span>][V + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= V; j++) &#123;<br>        dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>        <span class="hljs-keyword">if</span>(j &gt;= v[i]) &#123;<br>            dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - v[i]] + w[i]);<br>        &#125;<br>    &#125;<br>&#125;<br>System.out.println(dp[N][V]);<br></code></pre></div></td></tr></table></figure><p><strong>空间优化：二维 -&gt; 一维</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[V + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i ++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = V; j &gt;= v[i]; j --)&#123;<br>        dp[j] = Math.max(dp[j], dp[j - v[i]] + w[i]);<br>    &#125;<br>&#125;<br>System.out.println(dp[V]);<br></code></pre></div></td></tr></table></figure><hr><h3 id="二、完全背包"><a href="#二、完全背包" class="headerlink" title="二、完全背包"></a>二、完全背包</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i ++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v[i]; j &lt;= M; j ++) &#123;<br>        dp[j] = Math.max(dp[j], dp[j - v[i]] + w[i]);<br>    &#125;<br>&#125;<br>System.out.println(dp[M]);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板, DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆排序</title>
    <link href="/2022/03/26/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/03/26/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、堆排序思想"><a href="#一、堆排序思想" class="headerlink" title="一、堆排序思想"></a>一、堆排序思想</h3><ol><li><p>将序列构造成一个小（大）根堆</p></li><li><p>根节点是序列的最小（大）值，交换头尾元素</p></li></ol><blockquote><p>swap(h[1], h[size –]) </p></blockquote><ol start="3"><li>对头结点执行 down 操作，维护堆</li></ol><h3 id="二、具体过程"><a href="#二、具体过程" class="headerlink" title="二、具体过程"></a>二、具体过程</h3><h5 id="1-建立初始堆"><a href="#1-建立初始堆" class="headerlink" title="1.建立初始堆"></a>1.建立初始堆</h5><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%A0%86%E6%8E%92%E5%BA%8F01.png"></p><h5 id="2-头尾交换"><a href="#2-头尾交换" class="headerlink" title="2.头尾交换"></a>2.头尾交换</h5><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%A0%86%E6%8E%92%E5%BA%8F02.png"></p><h3 id="三、代码模板-小根堆"><a href="#三、代码模板-小根堆" class="headerlink" title="三、代码模板 (小根堆)"></a>三、代码模板 (小根堆)</h3><h5 id="1-建立初始堆-1"><a href="#1-建立初始堆-1" class="headerlink" title="1.建立初始堆"></a>1.建立初始堆</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i --) &#123;<br>    down(i);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-头尾交换，元素下沉"><a href="#2-头尾交换，元素下沉" class="headerlink" title="2.头尾交换，元素下沉"></a>2.头尾交换，元素下沉</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 大元素下沉</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t = u;<br>    <span class="hljs-comment">// 下标从 1 开始</span><br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) &#123;<br>        t = u * <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) &#123;<br>        t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (u != t) &#123;<br>        <span class="hljs-keyword">int</span> tmp = h[t];<br>        h[t] = h[u];<br>        h[u] = tmp;<br>        down(t);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、数组中的第K个最大元素"><a href="#四、数组中的第K个最大元素" class="headerlink" title="四、数组中的第K个最大元素"></a>四、<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">数组中的第K个最大元素</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] h;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.h = nums;<br>        <span class="hljs-keyword">this</span>.size = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br>            up(i);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (-- k &gt; <span class="hljs-number">0</span>) &#123;<br>            h[<span class="hljs-number">0</span>] = h[size --];<br>            up(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> h[<span class="hljs-number">0</span>];<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> t = u;<br>        <span class="hljs-comment">// 下标从0开始，左孩子下标为 2 * u + 1，右孩子下标为 2 * u + 2</span><br>        <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &gt; h[t]) &#123;<br>            t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] &gt; h[t]) &#123;<br>            t = u * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (u != t) &#123;<br>            <span class="hljs-keyword">int</span> tmp = h[t];<br>            h[t] = h[u];<br>            h[u] = tmp;<br>            up(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2022/03/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/03/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、归并思想：分治"><a href="#一、归并思想：分治" class="headerlink" title="一、归并思想：分治"></a>一、归并思想：分治</h3><ol><li><p>确定分界点</p><blockquote><p>mid =（left + right) / 2</p></blockquote></li><li><p>递归排序</p><blockquote><p>[left…mid] | [mid+1…right]</p></blockquote></li><li><p>归并 =&gt; 合二为一</p></li></ol><h3 id="二、具体过程"><a href="#二、具体过程" class="headerlink" title="二、具体过程"></a>二、具体过程</h3><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png"></p><h3 id="三、代码模板"><a href="#三、代码模板" class="headerlink" title="三、代码模板"></a>三、代码模板</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>        merge(nums, left, mid);<br>        merge(nums, mid + <span class="hljs-number">1</span>, right);<br>        mergeSort(nums, left, mid, right);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[right - left + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> L = left, R = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (L &lt;= mid &amp;&amp; R &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (nums[L] &lt;= nums[R]) &#123;<br>            tmp[index ++] = nums[L ++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp[index ++] = nums[R ++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (L &lt;= mid) &#123;<br>        tmp[index ++] = nums[L ++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (R &lt;= right) &#123;<br>        tmp[index ++] = nums[R ++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; tmp.length; k ++) &#123;<br>        nums[k + left] = tmp[k];<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、数组中的逆序对"><a href="#四、数组中的逆序对" class="headerlink" title="四、数组中的逆序对"></a>四、<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">数组中的逆序对</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        merge(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            merge(nums, left, mid);<br>            merge(nums, mid + <span class="hljs-number">1</span>, right);<br>            mergeSort(nums, left, mid, right);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[right - left + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> L = left, R = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (L &lt;= mid &amp;&amp; R &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (nums[L] &lt;= nums[R]) &#123;<br>                tmp[index ++] = nums[L ++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count += (mid - L + <span class="hljs-number">1</span>);<span class="hljs-comment">// 归并过程统计逆序对</span><br>                tmp[index ++] = nums[R ++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (L &lt;= mid) &#123;<br>            tmp[index ++] = nums[L ++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (R &lt;= right) &#123;<br>            tmp[index ++] = nums[R ++];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; tmp.length; k ++) &#123;<br>            nums[k + left] = tmp[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2022/03/24/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/03/24/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、快排思想：分治"><a href="#一、快排思想：分治" class="headerlink" title="一、快排思想：分治"></a>一、快排思想：分治</h3><ol><li><p>确定分界点 num</p><blockquote><p>A[left]、A[mid]、A[random]</p></blockquote></li><li><p>调整范围</p><blockquote><p>使得 [左区间] ≤ num，[右区间] ≤ num</p></blockquote></li><li><p>递归处理左右区间</p><blockquote><p>quickSort(A, left, j);</p><p>quickSort(A, j + 1, right);</p></blockquote></li></ol><h3 id="二、具体过程"><a href="#二、具体过程" class="headerlink" title="二、具体过程"></a>二、具体过程</h3><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/quicksort.png"></p><h3 id="三、代码模板"><a href="#三、代码模板" class="headerlink" title="三、代码模板"></a>三、代码模板</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> num = a[i + j &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> i = left - <span class="hljs-number">1</span>, j = right + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">do</span> i ++; <span class="hljs-keyword">while</span> (a[i] &lt; num);<span class="hljs-comment">// 注意是 &quot;＜&quot;，找到第一个 ≥ num 的数</span><br>        <span class="hljs-keyword">do</span> j --; <span class="hljs-keyword">while</span> (a[j] &gt; num);<span class="hljs-comment">// 注意是 &quot;＜&quot;，找到第一个 ≤ num 的数</span><br>        <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">int</span> tmp = a[i];<br>            a[i] = a[j];<br>            a[j] = tmp;<br>        &#125;<br>    &#125;<br>    quickSort(a, left, j);<br>    quickSort(a, j + <span class="hljs-number">1</span>, right);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、数组中的第K个最大元素"><a href="#四、数组中的第K个最大元素" class="headerlink" title="四、数组中的第K个最大元素"></a>四、<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">数组中的第K个最大元素</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> quickSort(a, <span class="hljs-number">0</span>, a.length - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<br>            <span class="hljs-keyword">return</span> a[k];<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = left - <span class="hljs-number">1</span>, j = right + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> num = a[i + j &gt;&gt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">do</span> i ++; <span class="hljs-keyword">while</span> (a[i] &gt; num);<br>            <span class="hljs-keyword">do</span> j --; <span class="hljs-keyword">while</span> (a[j] &lt; num);<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                <span class="hljs-keyword">int</span> tmp = a[i];<br>                a[i] = a[j];<br>                a[j] = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断第 K 大的数在哪个区间，不需要全部排序</span><br>        <span class="hljs-keyword">if</span> (j &gt;= k) &#123;<br>            <span class="hljs-keyword">return</span> quickSort(a, left, j, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> quickSort(a, j + <span class="hljs-number">1</span>, right, k);<br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 学习笔记</title>
    <link href="/2022/03/21/Kubernetes-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/21/Kubernetes-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、架构"><a href="#一、架构" class="headerlink" title="一、架构"></a>一、架构</h3><h3 id="二、核心组件"><a href="#二、核心组件" class="headerlink" title="二、核心组件"></a>二、核心组件</h3><h3 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-事务</title>
    <link href="/2022/03/20/MySQL-%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/03/20/MySQL-%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="一、事务的特性"><a href="#一、事务的特性" class="headerlink" title="一、事务的特性"></a>一、事务的特性</h3><ol><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ol><p>相关语法：</p><h3 id="二、事务并发执行时遇到的一致性问题"><a href="#二、事务并发执行时遇到的一致性问题" class="headerlink" title="二、事务并发执行时遇到的一致性问题"></a>二、事务并发执行时遇到的一致性问题</h3><ol><li><p>脏写</p><blockquote><p>一个事务修改了另一个未提交事务修改过的数据。</p></blockquote></li><li><p>脏读</p><blockquote><p>一个事务读到了另一个未提交事务修改过的数据。</p></blockquote></li><li><p>不可重复读</p><blockquote><p>一个事务修改了另一个未提交事务读取的数据。</p></blockquote></li><li><p>幻读</p><blockquote><p>一个事务先根据某些搜索条件查询出一些记录，在该事务未提交时，另一个事务写入了一些符合那些搜索条件的记录。</p></blockquote></li></ol><h3 id="三、事务隔离级别"><a href="#三、事务隔离级别" class="headerlink" title="三、事务隔离级别"></a>三、事务隔离级别</h3><ol><li>读未提交</li><li>读已提交 </li><li>可重复读</li><li>串行化</li></ol><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p>相关语法：</p><h3 id="四、MVCC"><a href="#四、MVCC" class="headerlink" title="四、MVCC"></a>四、MVCC</h3><h5 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h5><p>对于使用 InnoDB 存储引擎的表，聚簇索引记录里包含两个隐藏列：</p><ol><li>trx_id: 一个事务每次对某条聚簇索引记录进行改动时，都会把改事务的事务 id 赋值给 trx_id 隐藏列。</li><li>roll_pointer: 每次对某条聚簇索引记录进行改动时，都会把<strong>旧的版本</strong>写入到 <strong>undo 日志</strong>中。这个隐藏列相当于一个指针，可以通过它找到该记录修改前的信息。</li></ol><blockquote><p>在每次更新记录后，都会将旧值放到一条 undo 日志中（旧版本），随着更新次数的增多，所有的版本都会被 roll_pointer 属性连接成一个链表，这个链表称为<strong>版本链</strong>。版本链的头结点就是当前记录的最新值。利用版本链来<strong>控制并发事务访问相同记录</strong>的机制称为多版本并发控制。</p></blockquote><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/MVCC.png"></p><h5 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h5><ul><li>读未提交级别：直接读取记录的最新版本</li><li>串行化：采用加锁的方式来访问记录</li></ul><div class="note note-success">            <p><strong>读提交</strong>和<strong>可重复读</strong>级别如何判断版本链中的哪个版本是当前事务可见的 ？</p>          </div><p>ReadView 相当于一个快照，包括以下内容：</p><ul><li><p>m_id</p><blockquote><p>在生成 ReadView 时，当前系统中活跃的读写事务的事务id列表。“活跃”指的是启动了但没提交。</p></blockquote></li><li><p>min_trx_id</p><blockquote><p>m_id 中的最小值。</p></blockquote></li><li><p>max_trx_id</p><blockquote><p>在生成 ReadView 时，系统应该分配给下一个事务的事务id值。</p></blockquote></li><li><p>creator_trx_id</p><blockquote><p>生成该 ReadView 的事务的事务id。</p></blockquote></li></ul><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/read-view.png"></p><p>判断记录的某个版本是否可见的步骤：</p><ol><li>如果被访问版本的 trx_id 与 ReadView 中的 creator_trx_id 值相同，即事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li><li>如果 trx_id ＜ min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 之前已提交，故可见。</li><li>如果 trx_id ≥ max_trx_id 值，表明生成该版本的事务对于当前 ReadView 是未开始事务，故不可见。</li><li>如果 min_trx_id ≤ trx_id &lt; max_trx_id，需判断 trx_id 是否在<strong>活跃事务列表</strong>，在，说明创建该版本的事务处于活跃状态，不可见，否则，说明事务已提交，可见。</li></ol><blockquote><p>如果某个版本的事务对当前事务不可见，那就顺着版本链找到下一个版本的数据，并继续执行上面的步骤来判断记录的可见性。</p></blockquote><div class="note note-success">            <p><strong>读提交 VS 可重复读</strong></p>          </div><ol><li>读提交：<strong>每次读取数据前</strong>都生成一个 ReadView</li><li>可重复读：在<strong>第一次读取数据时</strong>生成一个 ReadView</li></ol><div class="note note-success">            <p><strong>关于 purge</strong></p>          </div><ul><li>insert undo 日志在事务提交之后就可以释放掉了，而 update undo 日志由于还需要支持 MVCC，因此不能立即删除掉。</li><li>为了支持 MVCC，delete mark 操作仅仅是在记录上打一个删除标记，并没有真正将记录删除。</li></ul><blockquote><p>在合适的时候把 update undo 日志以及仅仅被标记为删除的记录彻底删除掉，这个删除操作称为 <strong>purge</strong>。</p></blockquote><p>参考：</p><p>《MySQL是怎样运行的》</p><p>《MySQL实战45讲》</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM-垃圾回收方法</title>
    <link href="/2022/03/18/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%96%B9%E6%B3%95/"/>
    <url>/2022/03/18/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png"></p><h3 id="一、哪些对象还存活着"><a href="#一、哪些对象还存活着" class="headerlink" title="一、哪些对象还存活着"></a>一、哪些对象还存活着</h3><div class="note note-success">            <p><strong>可达性分析算法</strong></p>          </div><blockquote><p>可达性分析算法是以根对象集合（<strong>GCRoots</strong>）为起始点，按照从上至下的方式<strong>搜索被根对象集合所连接的目标对象</strong>是否可达。如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</p></blockquote><p>GC Roots 包括以下几类元素：</p><ul><li><p>虚拟机栈中引用的对象</p><blockquote><p>比如：各个线程被调用的方法中使用到的参数、局部变量等。</p></blockquote></li><li><p>本地方法栈内引用的对象</p></li><li><p>方法区中类静态属性引用的对象</p><blockquote><p>比如：Java类的引用类型静态变量</p></blockquote></li><li><p>方法区中常量引用的对象</p><blockquote><p>比如：字符串常量池（String Table）里的引用</p></blockquote></li><li><p>所有被同步锁synchronized持有的对象</p></li><li><p>Java虚拟机内部的引用。</p><blockquote><p>基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutOfMemoryError），系统类加载器。</p></blockquote></li><li><p>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p></li></ul><p>补充：所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的。（”Stop The World”）</p><div class="note note-success">            <p><strong>再谈引用</strong></p>          </div><ol><li><p>强引用</p><blockquote><p>Object o = new Object()；只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p></blockquote></li><li><p>软引用</p><blockquote><p>在系统将要发生 OOM 之前，会把这些对象列进回收范围进行第二次回收。</p></blockquote></li><li><p>弱引用</p><blockquote><p>被弱引用关联的对象只能生存到下一次垃圾收集发生为止。</p></blockquote></li><li><p>虚引用</p><blockquote><p>为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。</p></blockquote></li></ol><h3 id="二、垃圾收集方法"><a href="#二、垃圾收集方法" class="headerlink" title="二、垃圾收集方法"></a>二、垃圾收集方法</h3><div class="note note-primary">            <p><strong>分代收集</strong></p>          </div><ul><li>部分收集（Partial GC）<ul><li>新生代收集（Minor/Young GC）</li><li>老年代收集（Major/Old GC）</li><li>混合收集（Mixed GC）</li></ul></li><li>整堆收集（Full GC）</li></ul><ol><li><p>触发 Minor GC 的时机</p><ul><li>当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</li></ul></li><li><p>触发 Full GC 的时机</p><ul><li><p>老年代空间不足</p></li><li><p>方法区空间不足</p></li><li><p>System.gc() 表示建议执行 Full GC，但不一定会执行。</p></li><li><p>在 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，若老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p></li></ul></li></ol><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/%E5%88%86%E4%BB%A3.png"></p><div class="note note-primary">            <p><strong>收集方法</strong></p>          </div><h6 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1.标记-清除算法"></a>1.标记-清除算法</h6><blockquote><p>标记存活的对象，统一回收未被标记的对象</p></blockquote><p>缺点：</p><ul><li><p>执行效率随对象数量的增长而降低。</p></li><li><p>清除后会产生大量不连续的碎片。</p></li></ul><h6 id="2-标记-复制算法"><a href="#2-标记-复制算法" class="headerlink" title="2.标记-复制算法"></a>2.标记-复制算法</h6><blockquote><p>将可用内存按容量划分为大小相等的两块，每次只使用其中一块；当这一块内存用完了，就将存活的对象复制到另一块上，把这块内存空间一次清理掉。</p></blockquote><p>HotSpot 虚拟机默认 Eden 和 Survicor 的大小比例是 8:1。每次分配内存只使用 Eden 和其中一块 Survivor，发生垃圾回收时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已用过的那块 Survivor 空间。如果另一块 Survivor 空间没有足够空间存放上一次新生代收集下来的存活对象，这些对象将通过分配担保机制直接进入老年代。</p><p><strong>缺点：</strong></p><ul><li>在对象存活率较高时就要进行较多的复制，效率会降低</li><li>需要更多的额外空间做分配担保，以应对象 100% 存活的极端情况</li></ul><h6 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3.标记-整理算法"></a>3.标记-整理算法</h6><blockquote><p>让所有存活对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p></blockquote><p><strong>缺点：</strong></p><ul><li>对象移动操作必须全程暂停用户应用程序才能进行（ “Stop The World” )</li></ul><h3 id="三、经典垃圾收集器"><a href="#三、经典垃圾收集器" class="headerlink" title="三、经典垃圾收集器"></a>三、经典垃圾收集器</h3><h5 id="1-CMS"><a href="#1-CMS" class="headerlink" title="1.CMS"></a>1.CMS</h5><blockquote><p>CMS 收集器是一种以获取最短收集停顿时间为目标的收集器。</p></blockquote><p>整个过程分为四个步骤：</p><blockquote><p>在初始标记和重新标记这两个步骤仍然需要 “Stop The World”</p></blockquote><ol><li><p>初始标记</p><blockquote><p>仅标记 GC Roots 能直接关联到的对象，速度很快</p></blockquote></li><li><p>并发标记</p><blockquote><p>从 GC Roots 的直接关联对象开始遍历整个对象图的过程</p></blockquote></li><li><p>重新标记</p><blockquote><p>为了修正并发标记期间，因用户线程继续运作而导致标记变动的那一部分对象的标记记录</p></blockquote></li><li><p>并发清除</p></li></ol><h5 id="2-G1"><a href="#2-G1" class="headerlink" title="2.G1"></a>2.G1</h5><p>G1 仍然保留了新生代和老年代的概念，但新生代和老年代不再是固定的了，而是一系列区域（不需要连续）的动态集合。G1 把连续的 Java 堆划分为多个大小相等的独立区域（Region），每一个 Region 都可以作为 Eden、Survivor、Old 空间。</p><p>具体过程：G1 在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数 -XX:MaxGCPauseMills 指定，默认值是 200 ms），优先处理回收价值最大的那些 Region。</p><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/G1%E5%88%86%E5%8C%BA.png"></p><table><thead><tr><th>垃圾回收器</th><th>分类</th><th>作用位置</th><th>使用算法</th><th>特点</th></tr></thead><tbody><tr><td>Serial</td><td>串行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td></tr><tr><td>ParNew</td><td>并行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td></tr><tr><td>Parallel</td><td>并行</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td></tr><tr><td>Serial Old</td><td>串行</td><td>老年代</td><td>标记-压缩</td><td>响应速度优先</td></tr><tr><td>Parallel Old</td><td>并行</td><td>老年代</td><td>标记-压缩</td><td>吞吐量优先</td></tr><tr><td>CMS</td><td>并发</td><td>老年代</td><td>标记-清除</td><td>响应速度优先</td></tr><tr><td>G1</td><td>并发、并行</td><td>新生代、老年代</td><td>标记-压缩、复制算法</td><td>响应速度优先</td></tr></tbody></table><h3 id="四、内存分配与回收策略"><a href="#四、内存分配与回收策略" class="headerlink" title="四、内存分配与回收策略"></a>四、内存分配与回收策略</h3><ol><li><p><strong>对象优先在 Eden 分配</strong></p></li><li><p><strong>大对象直接进入老年代</strong></p></li><li><p><strong>长期存活的对象将进入老年代</strong></p></li></ol><h3 id="五、相关参数"><a href="#五、相关参数" class="headerlink" title="五、相关参数"></a>五、相关参数</h3><table><thead><tr><th>参数名称</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>-Xms</td><td>初始堆大小</td><td>物理内存的1/64</td></tr><tr><td>-Xmx</td><td>最大堆大小</td><td>物理内存的1/4</td></tr><tr><td>-Xmn</td><td>年轻代大小</td><td></td></tr><tr><td>-Xss</td><td>每个线程的堆栈大小</td><td></td></tr><tr><td>-XX:NewRatio</td><td>年轻代与老年代的比值</td><td>=3 表示，比值为 1:3</td></tr><tr><td>-XX:SurvivorRatio</td><td>Eden区与Survivor区的比值</td><td>=8 表示，比值为 8:2</td></tr></tbody></table><p>参考：</p><p>《深入理解 Java 虚拟机》</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>京东云</title>
    <link href="/2022/03/17/%E4%BA%AC%E4%B8%9C%E4%BA%91/"/>
    <url>/2022/03/17/%E4%BA%AC%E4%B8%9C%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<ol><li><p>你对 SpringCloud 是怎么理解的 ？</p></li><li><p>断路器它是什么作用 ?</p></li><li><p>SpringCloud 和 SpringBoot 有什么区别 ？</p></li><li><p>说说你对 MVC 的了解 ？</p></li><li><p>Java 中的几种引用类型，有什么区别 ？</p></li><li><p>Java 中有个类叫 ThreadLocal，知道它是怎么实现的吗 ？</p></li><li><p>volatile 是干嘛的，实现原理是什么 ？</p></li><li><p>在实际开发中用到过 ThreadLocal 吗 ？</p></li><li><p>对象比较时，equals 和 == 的区别 ？</p></li><li><p>String s = new String(“a”) 过程创建了几个对象 ？</p></li><li><p>说一下抽象类和接口的区别 ？</p></li><li><p>说说你对 Java 中多态的理解 ？</p></li><li><p>方法的重载 ？</p></li><li><p>volatile 能防止指令重排，讲一下什么是指令重排 ？</p></li><li><p>Java 多线程的了解 ？</p></li><li><p>对垃圾回收有什么了解 ？</p></li><li><p>运行时常量池在什么地方 ？</p></li><li><p>新生代和老年代默认的分配比例 ？</p></li><li><p>调整 Eden 和 Survivor 的比例大小用到哪个参数 ？</p></li><li><p>针对 JVM 调优，主要会用到哪些参数 ？</p></li><li><p>ConcurrentHashMap 的实现原理 ？</p></li><li><p>CAS 是一个什么样的机制 ？</p></li><li><p>Java 里面哪个类里面提供了 CAS 操作 ？</p></li><li><p>自旋锁是一个什么样的概念 ？</p></li><li><p>Linux 中常用的命令 ？</p></li><li><p>在一个比较大的文件中搜索一个关键字，怎么搜索 ？</p></li><li><p>MySQL 中的事务有几种隔离级别 ？</p></li><li><p>MySQL 中的可重复读是如何实现的 ？</p></li><li><p>undo log 是什么时候删掉的 ？</p></li><li><p>如何写一个高效的SQL 查询语句 ？</p></li><li><p>索引覆盖是什么概念 ？</p></li><li><p>要使用一个索引，要注意什么问题 ？</p></li><li><p>一个 varchar 类型的字段，在查询条件里赋值为数值类型的数据，能查询到数据吗 ？</p></li><li><p>索引用的数据结构是 B+树，为什么不用哈希表或者链表 ？</p></li><li><p>说一下算法中的分治思想 ？</p></li><li><p>你对微服务有了解吗 ？</p></li><li><p>SpringCloud 中是如何去做服务治理的 ？</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云-安全</title>
    <link href="/2022/02/25/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%89%E5%85%A8/"/>
    <url>/2022/02/25/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>介绍一下 <strong>KubeEdge</strong> ?</p></li><li><p>MySQL 常用的<strong>存储引擎</strong>有哪些 ？</p></li><li><p>InnoDB 默认的<strong>隔离级别</strong> ？</p></li><li><p>为什么它能实现这么高的隔离级别 ？</p></li><li><p>了解 MySQL 中的 MVCC 吗 ？</p></li><li><p>Java 中的 <strong>Map</strong> 你了解哪些 ?</p></li><li><p>说说对 <strong>volatile</strong> 的理解 ?</p></li><li><p><strong>ConcurrentHashMap</strong> 是如何实现线程安全的呢 ?</p></li><li><p>如果让你实现 ConcurrentHashMap 中的 size() ，你会怎么设计？</p></li><li><p>介绍一下 DNS ？</p></li><li><p>介绍一下 HTTPS ？</p></li><li><p>说一下你用过的开源框架 ？</p></li><li><p>说一下 Spring 的初始化过程 ？</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云-云原生II</title>
    <link href="/2022/02/25/%E9%98%BF%E9%87%8C%E4%BA%91-%E4%BA%91%E5%8E%9F%E7%94%9FII/"/>
    <url>/2022/02/25/%E9%98%BF%E9%87%8C%E4%BA%91-%E4%BA%91%E5%8E%9F%E7%94%9FII/</url>
    
    <content type="html"><![CDATA[<ol><li><p>KubeEdge 是怎么解决<strong>边缘自治</strong>的呢？</p></li><li><p>KubeEdge 是如何做到<strong>云边协同</strong>（一致性）的呢？</p></li><li><p>当云边通信恢复之后，节点<strong>状态同步</strong>是怎样去做的？</p></li><li><p>K8s 对边缘节点的操作都有哪些？</p></li><li><p>KubeEdge 在云端的核心组件是 CloudCore，包括哪些组件？</p></li><li><p>CloudHub 主要是负责什么 ？</p></li><li><p>K8s 能不能做一个介绍，比如包括哪几个服务组件，网络通信是怎么做的？</p></li><li><p>一个服务想对外暴露接口，有哪几种方式呢？</p></li><li><p>能讲一下 K8s 的网络是怎样通信的吗 ？</p></li><li><p>K8s 的一个 <strong>Pod</strong> 中容器与<strong>容器</strong>之间是如何通信的，Pod 之间是如何通信的 ？</p></li><li><p>不同 Node 之间是如何通信的呢 ？</p></li><li><p>有了解过 <strong>RBAC 权限模型</strong>吗 ？</p></li><li><p>如何从海量数据中过滤出有访问权限的数据 ？</p></li><li><p>有考虑过大量的数据读取的这种权限设计吗 ？</p></li><li><p>使用 WebSocket 会有什么劣势，相比于 Ajax，优缺点 ？</p></li><li><p>我看你用过 MySQL，说说常用的<strong>存储引擎</strong> ？</p></li><li><p>能不能讲一下 InnoDB 引擎的<strong>索引</strong>是用什么数据结构实现的 ？</p></li><li><p>InnoDB 为什么选用 <strong>B+ 树</strong>，而不用红黑树或者二叉树呢 ？</p></li><li><p>比如现在在 A-B-C上 建立了一个<strong>联合索引</strong>，SQL 中 where B= and C= ，请问这种情况下能不能命中联合索引 ？</p></li><li><p>那不能用联合索引的原因是什么 ？</p></li><li><p>比如我有一个慢 SQL，我想查这个 <strong>SQL</strong> 为什么这么慢，怎么去查，讲一下<strong>排查</strong>过程？</p></li><li><p><strong>explain</strong> 命令有用过吗 ？</p></li><li><p>有了解过 MySQL 的<strong>读锁</strong>和<strong>排他锁</strong>这些吗 ？</p></li><li><p><strong>I/O 多路复用</strong>里面有 select、poll、epoll，能不能讲一下这个 ？</p></li><li><p>那你讲一下 TCP 为什么要做<strong>三次握手</strong>和<strong>四次挥手</strong>，还有对应的<strong>状态迁移</strong> ？</p></li><li><p>HTTP 1.0、<strong>HTTP</strong> 1.1、HTTP 2.0 它们的区别能不能讲一下 ？</p></li><li><p>聊一下 Java，想问一下你 Java 大概有多少行的代码量，大概估一下，给个量级 ？</p></li><li><p><strong>Spring</strong> 框架主要解决了什么问题，SpringBoot 和 SpringCloud 有什么区别 ？</p></li><li><p>你有了解过 Nacos 和 Eureka 吗 ？</p></li><li><p>聊一下<strong>JVM</strong>， JVM 的<strong>内存区域</strong> ？ </p></li><li><p>一定不会出现 <strong>OOM</strong> 的是哪些区域，那为什么其他的区域都会发生 OOM 呢 ？</p></li><li><p><strong>Mybatis</strong> 有用过吗，那它是怎么解决 <strong>SQL 注入</strong>的 ？</p></li><li><p>Java 的<strong>线程池</strong>有哪些，它的默认的<strong>处理策略</strong>有哪几种 ？</p></li><li><p>Java 的 AIO、<strong>NIO</strong>、BIO 能不能介绍一下它们的区别 ？</p></li><li><p>Java 的 <strong>Collection</strong> 和 <strong>Collections</strong> 有什么区别 ？</p></li><li><p><strong>HashMap</strong> 能大概讲一下吗 ？</p></li><li><p>JDK 1.8 中的 HashMap 为什么要加上<strong>红黑树</strong>这个结构呢 ？</p></li><li><p>链表长度超过 8 会转换成红黑树，那什么时候会退化成链表呢 ？</p></li><li><p>HashMap 是线程非安全的，如果我想用线程安全的，怎么办 ？</p></li><li><p><strong>ConcurrentHashMap</strong> 是怎么保证线程安全的 ？</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云-云原生I</title>
    <link href="/2022/02/14/%E9%98%BF%E9%87%8C%E4%BA%91-%E4%BA%91%E5%8E%9F%E7%94%9FI/"/>
    <url>/2022/02/14/%E9%98%BF%E9%87%8C%E4%BA%91-%E4%BA%91%E5%8E%9F%E7%94%9FI/</url>
    
    <content type="html"><![CDATA[<ol><li>浏览器输入网址到最终渲染页面，发生了什么过程 ？</li><li>其中用到了很多的协议，寻址用的是哪个协议 ？</li><li>从IP 地址转换成 MAC 地址用的是哪个协议 ？</li><li>RARP协议 你能详细讲一下吗？</li><li>讲一下 TCP 的三次握手 ？</li><li>TCP 两次握手可以吗，为什么要三次 ？</li><li>在四次挥手的过程中，会有一个等待时间，是多少，有什么意义？</li><li>MSL 你了解吗 ？</li><li>TCP 的拥塞控制，能讲一下你的理解吗 ？</li><li>解决哈希碰撞的方法主要有哪些 ？</li><li>什么情况下用链地址法用的比较多 ？</li><li>进程、线程和协程之间的区别和联系，你能讲一下吗 ？</li><li>你了解到的进程间的通信方式有哪些 ？</li><li>在内存分配过程中，堆区和栈区的区别 ？</li><li>你对数据结构中堆、栈、队列的理解 ？</li><li>Java 中的多态你能讲一下吗 ？</li><li>Java 中的覆盖和重载，你能讲一下吗 ？</li><li>设计模式，你能稍微讲一下吗 ？</li><li>说到了单例模式，每种实现方式的优缺点 ？</li><li>懒加载又分为哪些 ？线程安全的和线程不安全，说说线程安全的缺点 ？</li><li>HashMap 有哪几种遍历方式 ？</li><li>讲一下你理解的 StringBuffer 和 StringBuilder 的区别 ？</li><li>主流的垃圾回收算法主要有哪些 ？</li><li>想了解一下你对 Linux 的熟悉程度 ？</li><li>你常用的 shell 命令都有哪些？</li><li>查找、截取是通过什么命令 ？</li><li>你用过 grep 的查找，有没有用过正则匹配 ？</li><li>节点内存占用过高，你排查过这样的问题吗 ？</li><li>了解 Kubernetes 是通过什么途径了解，知道的有什么 ？</li></ol>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux-常用操作</title>
    <link href="/2022/01/05/Linux-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/01/05/Linux-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1.用户管理"></a>1.用户管理</h4><h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">whoami<br></code></pre></div></td></tr></table></figure><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo adduser zh---添加zh用户到系统，同时为新用户创建home目录<br><br>su -l zh---切换登录zh用户<br></code></pre></div></td></tr></table></figure><h5 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">groups zh---查看用户zh所在的用户组<br><br>su -l zh---sudo ls---让zh加入sudo用户组从而获取root权限<br></code></pre></div></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo deluser zh---删除zh用户<br></code></pre></div></td></tr></table></figure><h4 id="2-软件管理"><a href="#2-软件管理" class="headerlink" title="2.软件管理"></a>2.软件管理</h4><h5 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h5><div class="note note-primary">            <p>zip</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">打包：zip something.zop something （目录请加 -r 参数）<br>解包：unzip something.zip<br>指定路径：-d 参数<br></code></pre></div></td></tr></table></figure><div class="note note-primary">            <p>tar</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">打包：tar -zcvf something.tar something<br>解包：tar -zxvf something.tar<br>指定路径：-C 参数<br></code></pre></div></td></tr></table></figure><h4 id="3-文件和目录权限"><a href="#3-文件和目录权限" class="headerlink" title="3.文件和目录权限"></a>3.文件和目录权限</h4><h3 id="初始化环境配置"><a href="#初始化环境配置" class="headerlink" title="初始化环境配置"></a>初始化环境配置</h3><h4 id="1-更换软件镜像源"><a href="#1-更换软件镜像源" class="headerlink" title="1.更换软件镜像源"></a>1.更换软件镜像源</h4><div class="note note-primary">            <p>修改 source.list 权限</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo chmod 666 /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure><div class="note note-primary">            <p>更换镜像源</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">########   Ubuntu 20.04 阿里云镜像源   ###############</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：更换树莓派（ARM）上的镜像源时，上面链接中的 ubuntu  改为 ubuntu-ports</p></blockquote><div class="note note-primary">            <p>更新软件列表和软件</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt update<br>sudo apt upgrade<br></code></pre></div></td></tr></table></figure><h4 id="2-配置Vim"><a href="#2-配置Vim" class="headerlink" title="2.配置Vim"></a>2.配置Vim</h4><span class="label label-primary">行号</span><span class="label label-info">高亮</span><span class="label label-default">行号</span><span class="label label-success">缩进</span><span class="label label-primary">编码</span><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> nu!<br>syntax on<br><span class="hljs-built_in">set</span> ai!<br><span class="hljs-built_in">set</span> ruler<br><span class="hljs-built_in">set</span> nohls<br><span class="hljs-built_in">set</span> softtabstop=5<br><span class="hljs-built_in">set</span> nocindent<br><span class="hljs-built_in">set</span> tabstop=4<br><span class="hljs-built_in">set</span> shiftwidth=4<br><span class="hljs-built_in">set</span> backspace=2<br><span class="hljs-built_in">set</span> incsearch<br><span class="hljs-built_in">set</span> showmatch<br>inoremap ( ()&lt;ESC&gt;i<br>inoremap &#123; &#123;&#125;&lt;ESC&gt;i<br>inoremap <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-string">&#x27;&lt;ESC&gt;i</span><br><span class="hljs-string">inoremap &quot; &quot;&quot;&lt;ESC&gt;i</span><br><span class="hljs-string">inoremap [ []&lt;ESC&gt;i</span><br><span class="hljs-string">if &amp;term==&quot;xterm&quot;</span><br><span class="hljs-string">set t_Co=8</span><br><span class="hljs-string">set t_Sb=^[[4%dm</span><br><span class="hljs-string">set t_Sf=^[[3%dm</span><br><span class="hljs-string">endif</span><br><span class="hljs-string">let &amp;termencoding=&amp;encoding</span><br><span class="hljs-string">set fileencodings=utf-8,gbk,ucs-bom,cp936</span><br></code></pre></div></td></tr></table></figure><h4 id="3-软件安装-amp-配置"><a href="#3-软件安装-amp-配置" class="headerlink" title="3.软件安装&amp;配置"></a>3.软件安装&amp;配置</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 Java 环境</span><br>sudo apt install openjdk-8-jdk-headless<br></code></pre></div></td></tr></table></figure><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install mysql-server<br></code></pre></div></td></tr></table></figure><h5 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h5><div class="note note-primary">            <p>安装</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh<br>bash Anaconda3-2021.11-Linux-x86_64.sh<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>操作</p>          </div><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 创建指定 Python 版本的环境</span><br>conda create --name your_env_name python=x.x<br><span class="hljs-comment"># 列出当前所有环境</span><br>conda env list<br><span class="hljs-comment"># 进入某个环境</span><br>activate env_name<br><span class="hljs-comment"># 退出当前环境</span><br>deactivate <br><span class="hljs-comment"># 复制环境</span><br>conda create --name new_env_name --<span class="hljs-built_in">clone</span> old_env_name <br><span class="hljs-comment"># 删除环境</span><br>conda remove --name env_name --all<br><span class="hljs-comment"># 分享环境</span><br>conda env <span class="hljs-built_in">export</span> &gt; environment.yml<br>conda env create -f environment.yml<br></code></pre></div></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-配置系统服务"><a href="#1-配置系统服务" class="headerlink" title="1.配置系统服务"></a>1.配置系统服务</h4><h4 id="2-服务重启脚本"><a href="#2-服务重启脚本" class="headerlink" title="2.服务重启脚本"></a>2.服务重启脚本</h4><h4 id="3-Git-命令速查表"><a href="#3-Git-命令速查表" class="headerlink" title="3.Git 命令速查表"></a>3.Git 命令速查表</h4><blockquote><p>图片来源于网络</p></blockquote><p><img src="https://redcathost.oss-cn-beijing.aliyuncs.com/Image-Host/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png"></p><h4 id="4-GUI-下安装中文输入法"><a href="#4-GUI-下安装中文输入法" class="headerlink" title="4.GUI 下安装中文输入法"></a>4.GUI 下安装中文输入法</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install ibus-libpinyin<br>sudo apt install ibus-clutter<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
